# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3
import timeit


def bt1(room_number):
    level = 0
    floor = 0
    room = 0
    position = 0
    go = True
    while go:
        for j in range(level):
            if go:
                floor += 1
                position = 0
                for g in range(level):
                    position += 1
                    room += 1
                    if room == room_number:
                        go = False
                        break
            else:
                break
        level += 1
    return(floor, position)


def bt2(room_number):
    rooms_block = 0
    last_room = 0
    last_floor = 0
    while room_number > last_room:
        rooms_block += 1
        last_room += rooms_block * rooms_block
        last_floor += rooms_block
    i = 0
    while last_room > room_number:
        last_room -= 1
        if i < rooms_block - 1:
            i += 1
        else:
            last_floor -= 1
            i = 0
    position = rooms_block - i
    return(last_floor, position)


def bt3(room_number):
    level = 1
    floor = 0
    position = 0
    go = True
    while go:
        last_room = int(level * (level + 1) * (2 * level + 1) / 6)
        if last_room >= room_number:
            last_floor = int(level * (level + 1) / 2)
            floor = last_floor - ((last_room - room_number) // level)
            position = level - ((last_room - room_number) % level)
            go = False
        level += 1
    return(floor, position)


n = int(input('Введите номер комнаты: '))
print(f'Вавилонская башня. Алгоритм №1 {bt1(n)}')
print(f'Вавилонская башня. Алгоритм №2 {bt2(n)}')
print(f'Вавилонская башня. Алгоритм №3 {bt3(n)}')
print(timeit.timeit('bt1(n)', setup='from __main__ import bt1, n', number = 100000))
print(timeit.timeit('bt2(n)', setup='from __main__ import bt2, n', number = 100000))
print(timeit.timeit('bt3(n)', setup='from __main__ import bt3, n', number = 100000))

# За основу взяты алгоритмы расчета задачи о вавилонской башне.
# -------------------------------------------------------------
# Алгоритм №1 - решение в лоб.
# Проходим все комнаты в лобснизу вверх, пока не дойдем до нужной
# При прохождении фиксируем этаж и позицию комнаты
#
# Алгоритм №2 - умный перебор
# Первым делом находим необходимый блок (уровень),
# и уже в блоке находим этаж позицию комнаты начиная справа.
#
# Алгоритм №3 - использование формул расчета.
# Проходимся снизу вверх, но по блокам (уровням).
# и уже в блоке находим этаж позицию комнаты начиная справа.
#
# Результаты:
# Поиск этажа и позиции комнаты с номером 556.
#
# Вавилонская башня. Алгоритм №1 (71, 2)
# Вавилонская башня. Алгоритм №2 (71, 2)
# Вавилонская башня. Алгоритм №3 (71, 2)
# 12.338444899999999
# 3.0238672000000015
# 0.8698976000000016
#
# Анализ на основе 100000 выполнений каждого алгоритма:
# Алгоритм №1 показал худшие результаты на большом количестве проходов задачи,
# т.к. код не оптимизирован, много проходов в цикле по всей башне...
# Алгоритм №2 лучшие результаты, т.к. есть некоторая оптимизация алгоритма,
# меньше проходов в цикле.
# Алгоритм №3 самый быстрый, т.к. применены известные формулы расчета.
#

